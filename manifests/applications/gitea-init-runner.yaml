apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitea-runner-sa
  namespace: applications
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitea-runner-role
  namespace: applications
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec"]
  verbs: ["get", "list", "create"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitea-runner-rolebinding
  namespace: applications
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitea-runner-role
subjects:
- kind: ServiceAccount
  name: gitea-runner-sa
  namespace: applications
---
apiVersion: batch/v1
kind: Job
metadata:
  name: gitea-init-runner
  namespace: applications
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      labels:
        app: gitea-init-runner
      annotations:
        linkerd.io/inject: disabled
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-gitea
        image: curlimages/curl:latest
        command:
        - sh
        - -c
        - |
          echo "Waiting for Gitea to be ready..."
          attempts=0
          max_attempts=60
          until curl -sf http://gitea:3000/api/healthz > /dev/null; do
            attempts=$((attempts + 1))
            if [ $attempts -ge $max_attempts ]; then
              echo "Gitea failed to become ready after $max_attempts attempts"
              exit 1
            fi
            echo "Gitea not ready yet, waiting... (attempt $attempts/$max_attempts)"
            sleep 5
          done
          echo "Gitea is ready!"
          sleep 5
      serviceAccountName: gitea-runner-sa
      containers:
      - name: init-runner
        image: bitnami/kubectl:latest
        command:
        - sh
        - -c
        - |
          set -e
          echo "Creating runner registration token using Gitea CLI..."

          # Use kubectl exec to run the Gitea CLI command
          # The API endpoint is broken in Gitea 1.20, so we use the CLI instead
          TOKEN=$(kubectl exec -n applications deployment/gitea -c gitea -- \
            /bin/bash -c "cd /data/gitea && /app/gitea/gitea actions generate-runner-token" 2>/dev/null | tail -1)

          if [ -z "$TOKEN" ]; then
            echo "Failed to generate runner token via Gitea CLI"
            exit 1
          fi

          echo "Runner token created successfully"
          echo "Token (first 10 chars): ${TOKEN:0:10}..."

          # Create/update the secret with the generated token
          echo "Updating runner-secret with generated token..."
          kubectl create secret generic runner-secret \
            --from-literal=token="$TOKEN" \
            --namespace=applications \
            --dry-run=client -o yaml | kubectl apply -f -

          echo "Secret updated successfully"

          # Restart the runner deployment to pick up the new token
          echo "Restarting act-runner deployment..."
          kubectl rollout restart deployment/act-runner -n applications

          echo "Waiting for runner to be ready..."
          kubectl rollout status deployment/act-runner -n applications --timeout=2m

          echo "Runner initialization complete!"
