apiVersion: apps/v1
kind: Deployment
metadata:
  name: django
  namespace: applications
  labels:
    app: django
  annotations:
    argocd-image-updater.argoproj.io/image-list: django=gitea.homelab.local/homelab/django-app:1.x
    argocd-image-updater.argoproj.io/django.update-strategy: semver
    argocd-image-updater.argoproj.io/write-back-method: git
    argocd-image-updater.argoproj.io/git-branch: main
spec:
  replicas: 1
  selector:
    matchLabels:
      app: django
  template:
    metadata:
      labels:
        app: django
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: django
        image: ghcr.io/lpmi-13/k3s-remotelab-django:latest
        imagePullPolicy: Always
        env:
        - name: REDIS_URL
          value: "redis://redis:6379/1"
        - name: DEBUG
          value: "false"
        - name: SECRET_KEY
          value: "django-insecure-homelab-key-change-in-production"
        ports:
        - containerPort: 8000
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        readinessProbe:
          httpGet:
            path: /api/health/
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/health/
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
        volumeMounts:
        - name: django-storage
          mountPath: /app/data
      volumes:
      - name: django-storage
        persistentVolumeClaim:
          claimName: django-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: django-pvc
  namespace: applications
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: django
  namespace: applications
  labels:
    app: django
spec:
  selector:
    app: django
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP